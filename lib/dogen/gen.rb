require_relative 'render'

module Dogen

  # Source code generator for Domain
  class Gen
    def self.call(*args, **para)
      new(*args, **para).call
    end

    private_class_method :new
    # @param dom [Domain] source model for code generation
    # @param lib [String] path to place generated code
    # @param erblib [String] path to erb templated
    def initialize(dom, lib = Dir.pwd)
      @dom = GuardDomain.(dom)
      @lib = lib
      @inc = []
    end

    def call
      provide_dependencies
      gen_entities
      gen_services
      gen_dogenreq
    end

    # SOURCE_GUARD = 'arguards.rb'
    REQUIRE_DGEN = 'dogenr.rb'

    def provide_dependencies
      Dir.chdir(@lib) do
        %w(entities services).each{|dir|
          Dir.mkdir dir unless Dir.exist? dir
        }

        decorator = Decorator.new(@dom)
        creator = ->(source, dest) {
          return if File.exist? dest
          erbt = File.read(source)
          body = Render.(decorator, erbt)
          body = [streamer, body.first].join(?\n)
          File.write(dest, body)
        }

        src = File.join(Dogen.root, 'lib/erb/arguard.rb.erb')
        dst = 'arguards.rb'
        creator.call(src, dst)

        src = File.join(Dogen.root, 'lib/erb/dogen-entity.rb.erb')
        dst = File.join(@lib, 'entities', 'entity.rb')
        creator.call(src, dst)

        src = File.join(Dogen.root, 'lib/erb/dogen-service.rb.erb')
        dst = File.join(@lib, 'services', 'service.rb')
        creator.call(src, dst)
      end
    end

    def gen_entities
      src = File.join(Dogen.root, 'lib/erb/entity.rb.erb')
      erb = File.read(src)
      @dom.entities.map{|e|
        Decorator.new(e, "#{@dom.name.capitalize}::Entities" )
      }.each do |e|
        body = Render.(e, erb)
        src = File.join("entities", e.source_file)
        body = [streamer, body].join(?\n)
        File.write(File.join(@lib, src), body)
        @inc << src
      end
    end

    def gen_services
      src = File.join(Dogen.root, 'lib/erb/service.rb.erb')
      erb = File.read(src)
      @dom.services.map{|a|
        Decorator.new(a, "#{@dom.name.capitalize}::Services")
      }.each do |a|
        body = Render.(a, erb)
        src = File.join("services", a.source_file)
        body = [streamer, body].join(?\n)
        File.write(File.join(@lib, src), body)
        @inc << src
      end
    end

    # TODO: services.rb, entities.rb
    def gen_dogenreq
      generate = ->(ary, dest) {
        include = ary
          .map{|i| i.sub(/.rb\z/, '') }
          .map{|i| "require_relative '%s'" % i}
        body = include.unshift(streamer).join(?\n)
        File.write(dest, body)
      }
      dest = File.join(@lib, 'entities.rb')
      part = @inc.select{|i| i =~ /entities/}
      generate.call(part, dest)

      dest = File.join(@lib, 'services.rb')
      part = @inc.select{|i| i =~ /services/}
      generate.call(part, dest)

      dest = File.join(@lib, '_dogen.rb')
      part = %w(arguards.rb entities.rb services.rb)
      generate.call(part, dest)
    end

    def streamer
      STREAMER % [timestamp, @dom.name]
    end

    def timestamp
      Time.now.strftime('on %B %e, %Y at %H:%M:%S')
    end

    STREAMER = <<~EOF
      # This file generated by Dogen %s
      # The domain model "%s"
      # --
      # [Dogen](https://github.com/nvoynov/dogen)
      # [Cleon](https://github.com/nvoynov/cleon)
      #
    EOF
  end

end
